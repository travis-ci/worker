#!/usr/bin/env ruby
# inspired by:
# http://blog.packagecloud.io/api/2015/07/06/pruning-packages-using-the-API/

require 'json'
require 'net/http'
require 'openssl'
require 'time'
require 'uri'

class PackageCloudPrune
  def initialize(argv = ARGV, env = ENV)
    @argv = argv
    @repository = argv.first
    @dist = argv[1]
    @user = (env['PACKAGECLOUD_USER'] || env['PC_USER'])
    @api_token = env['PACKAGECLOUD_TOKEN']
    @max_errors ||= Integer(env['MAX_ERRORS'] || 10)
    @limit = Integer(argv[2] || 10)
    @package = (env['PACKAGE'] || 'travis-worker')
    @package_type = 'deb'
    @package_type = 'rpm' if @dist =~ /el/
    @package_arch = 'amd64'
    @package_arch = 'x86_64' if @dist =~ /el/
  end

  def run
    unless api_token
      puts 'Missing PACKAGECLOUD_TOKEN'
      return 1
    end

    unless user
      puts 'Missing PACKAGECLOUD_USER or PC_USER'
      return 1
    end

    unless repository
      puts 'Supply the repository name as the first argument'
      puts "E.g. 'worker' or 'worker-testing"
      return 1
    end

    unless dist
      puts 'Supply the distribution {name}/{release} as the second argument'
      puts "E.g. 'ubuntu/trusty' or 'el/7'"
      return 1
    end

    i = sorted_package_versions.size - 1
    puts "There are currently #{i} packages in #{repository}"
    puts "Your limit is #{limit}"

    if i > limit
      puts "Deleting #{i - limit}"
    else
      puts "The number of packages is below #{limit}, so not yanking any."
      return 0
    end

    n_errors = 0

    until i == limit
      to_yank = sorted_package_versions[i]
      filename = to_yank['filename']

      begin
        puts "attempting to yank #{filename}"
        if yank_file(to_yank['distro_version'], filename)
          puts "successfully yanked #{filename}!"
        else
          puts "failed with #{result}"
        end
      rescue => e
        raise(e) if n_errors >= max_errors
        puts "ERROR yanking #{filename}: #{e}"
        n_errors += 1
      end

      i -= 1
    end
    0
  end

  private

  attr_reader :repository, :dist, :user, :api_token, :max_errors
  attr_reader :limit, :package, :package_type, :package_arch

  def yank_file(distro, filename)
    req = Net::HTTP::Delete.new(File.join(url.path, distro, filename))
    req.basic_auth(url.user, url.password)
    result = http_conn.request(req).body
    return true if JSON.parse(result) == {}
    false
  end

  def sorted_package_versions
    @sorted_package_versions ||= package_versions.sort_by { |v|
      Time.parse(v['created_at'])
    }.reverse!
  end

  def package_versions
    req = Net::HTTP::Get.new(File.join(url.path, package_versions_path))
    req.basic_auth(url.user, url.password)
    JSON.parse(http_conn.request(req).body)
  end

  def package_versions_path
    @package_versions_path ||= File.join(
      'package', package_type, dist, package, package_arch, 'versions.json'
    )
  end

  def http_conn
    return @http_conn if @http_conn
    @http_conn = Net::HTTP.new(url.host, 443)
    @http_conn.use_ssl = true
    @http_conn.verify_mode = OpenSSL::SSL::VERIFY_PEER
    @http_conn
  end

  def url
    @url ||= URI(
      File.join(
        "https://#{api_token}:@packagecloud.io",
        'api/v1/repos', user, repository
      )
    )
  end
end

exit(PackageCloudPrune.new.run) if $PROGRAM_NAME == __FILE__
